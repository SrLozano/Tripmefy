import { InjectionToken, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { FirebaseOptions, FirebaseAppConfig, ɵAngularFireSchedulers } from '@angular/fire';
import { UploadMetadata } from './interfaces';
import { storage } from 'firebase/app';
import 'firebase/storage';
import * as ɵngcc0 from '@angular/core';
export declare const BUCKET: InjectionToken<string>;
/**
 * AngularFireStorage Service
 *
 * This service is the main entry point for this feature module. It provides
 * an API for uploading and downloading binary files from Cloud Storage for
 * Firebase.
 */
export declare class AngularFireStorage {
    readonly storage: storage.Storage;
    readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;
    readonly schedulers: ɵAngularFireSchedulers;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, storageBucket: string | null, platformId: Object, zone: NgZone);
    ref(path: string): import("./ref").AngularFireStorageReference;
    upload(path: string, data: any, metadata?: UploadMetadata): import("./task").AngularFireUploadTask;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireStorage>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5kLnRzIiwic291cmNlcyI6WyJzdG9yYWdlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7OztBQWVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEZpcmViYXNlT3B0aW9ucywgRmlyZWJhc2VBcHBDb25maWcsIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XHJcbmltcG9ydCB7IFVwbG9hZE1ldGFkYXRhIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XHJcbmltcG9ydCAnZmlyZWJhc2Uvc3RvcmFnZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEJVQ0tFVDogSW5qZWN0aW9uVG9rZW48c3RyaW5nPjtcclxuLyoqXHJcbiAqIEFuZ3VsYXJGaXJlU3RvcmFnZSBTZXJ2aWNlXHJcbiAqXHJcbiAqIFRoaXMgc2VydmljZSBpcyB0aGUgbWFpbiBlbnRyeSBwb2ludCBmb3IgdGhpcyBmZWF0dXJlIG1vZHVsZS4gSXQgcHJvdmlkZXNcclxuICogYW4gQVBJIGZvciB1cGxvYWRpbmcgYW5kIGRvd25sb2FkaW5nIGJpbmFyeSBmaWxlcyBmcm9tIENsb3VkIFN0b3JhZ2UgZm9yXHJcbiAqIEZpcmViYXNlLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhckZpcmVTdG9yYWdlIHtcclxuICAgIHJlYWRvbmx5IHN0b3JhZ2U6IHN0b3JhZ2UuU3RvcmFnZTtcclxuICAgIHJlYWRvbmx5IGtlZXBVbnN0YWJsZVVudGlsRmlyc3Q6IDxUPihvYnM6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD47XHJcbiAgICByZWFkb25seSBzY2hlZHVsZXJzOiDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycztcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgbmFtZU9yQ29uZmlnOiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwgfCB1bmRlZmluZWQsIHN0b3JhZ2VCdWNrZXQ6IHN0cmluZyB8IG51bGwsIHBsYXRmb3JtSWQ6IE9iamVjdCwgem9uZTogTmdab25lKTtcclxuICAgIHJlZihwYXRoOiBzdHJpbmcpOiBpbXBvcnQoXCIuL3JlZlwiKS5Bbmd1bGFyRmlyZVN0b3JhZ2VSZWZlcmVuY2U7XHJcbiAgICB1cGxvYWQocGF0aDogc3RyaW5nLCBkYXRhOiBhbnksIG1ldGFkYXRhPzogVXBsb2FkTWV0YWRhdGEpOiBpbXBvcnQoXCIuL3Rhc2tcIikuQW5ndWxhckZpcmVVcGxvYWRUYXNrO1xyXG59XHJcbiJdfQ==